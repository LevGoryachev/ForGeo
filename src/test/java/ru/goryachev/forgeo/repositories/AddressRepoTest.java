package ru.goryachev.forgeo.repositories;

import org.junit.jupiter.api.*;
import org.assertj.core.api.Assertions;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.annotation.Rollback;
import ru.goryachev.forgeo.app.AppInit;
import ru.goryachev.forgeo.models.Address;

import java.util.List;
import java.util.Optional;

import static org.junit.jupiter.api.Assertions.*;

/**
 * CRUD JPA Repository testing with real DB.
 * Necessary to use Lifecycle.PER_CLASS (@TestInstance) to work with common id (testId variable).
 * An entity with autogenerated ID suppose to be created in the first method (1).
 * The ID will be used in each method (2,4,5).
 * The entity with ID suppose to be deleted in the last one (5).
 * @author Lev Goryachev
 * @version 1.0
 */

@TestMethodOrder(MethodOrderer.OrderAnnotation.class)
@SpringBootTest(classes = AppInit.class, webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)
@TestInstance(TestInstance.Lifecycle.PER_CLASS)
//@DataJpaTest()
public class AddressRepoTest {

    Long testId;

    @Autowired
    private AddressRepo addressRepo;

    @Test
    @Order(1)
    @Rollback(value = false)
    public void saveAddressTest(){
        /*Address address = Address.builder()
                .fieldOne("abc")
                .fieldTwo("def")
                .fieldThree("xyz")
                .build();*/
        Address address = new Address();
        address.setType("testValue115588");
        address.setLineOne("testValueAbc");
        address.setLineTwo("testValueDef");
        address.setLineThree("testValueXyz");
        address.setTownCity("Los Angeles");
        address.setCountry("USA");
        address.setZipPostal("115588");
        Address savedAddress = addressRepo.save(address);
        this.testId = savedAddress.getId();
        Assertions.assertThat(savedAddress.getId()).isGreaterThan(0);
    }

    @Test
    @Order(2)
    public void getAddressTest(){

        Address address = addressRepo.findById(testId).get();

        Assertions.assertThat(address.getId()).isEqualTo(testId);
    }

    @Test
    @Order(3)
    public void getAllAddressesTest(){

        List<Address> addresses = addressRepo.findAll();

        Assertions.assertThat(addresses.size()).isGreaterThan(0);

    }

    @Test
    @Order(4)
    @Rollback(value = false)
    public void updateAddressTest(){

        Address address = addressRepo.findById(testId).get();

        address.setCountry("USofRussia");

        Address addressUpdated =  addressRepo.save(address);

        Assertions.assertThat(addressUpdated.getCountry()).isEqualTo("USofRussia");

    }

    @Test
    @Order(5)
    @Rollback(value = false)
    public void deleteAddressTest(){

        Address address = addressRepo.findById(testId).get();

        addressRepo.delete(address);

        //addressRepo.deleteById(1L);

        Address addressEmpty = null;

        //Optional<Employee> optionalAddress = addressRepo.findByEmail("abc@gmail.com");

        /*if(optionalAddress.isPresent()){
            address1 = optionalAddress.get();
        }*/

        Optional<Address> optionalAddress = addressRepo.findById(testId);

        if(optionalAddress.isPresent()){
            addressEmpty = optionalAddress.get();
        }

        Assertions.assertThat(addressEmpty).isNull();
    }
}